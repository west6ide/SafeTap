package controller

import (
	"Diploma/config"
	"Diploma/controller/authentication"
	"Diploma/users"
	"encoding/json"
	"github.com/gorilla/websocket"
	"log"
	"net/http"
	"sync"
	"time"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool { return true },
}

var clients = make(map[*websocket.Conn]uint) // –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ UserID
var locationMu sync.Mutex

type LocationUpdate struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

func HandleLiveLocation(w http.ResponseWriter, r *http.Request) {
	log.Println("üîÑ –ù–æ–≤–æ–µ WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	token := r.URL.Query().Get("token")
	if token == "" {
		log.Println("‚ùå –û—à–∏–±–∫–∞: JWT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
		http.Error(w, "Unauthorized: missing token", http.StatusUnauthorized)
		return
	}

	claims, err := authentication.ValidateJWT(token)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ JWT:", err)
		http.Error(w, "Unauthorized: Invalid token", http.StatusUnauthorized)
		return
	}

	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("‚ùå WebSocket –æ—à–∏–±–∫–∞:", err)
		return
	}
	defer ws.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d\n", claims.UserID)

	// –î–æ–±–∞–≤–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞
	locationMu.Lock()
	clients[ws] = claims.UserID
	locationMu.Unlock()

	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ping/pong –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	ws.SetReadDeadline(time.Now().Add(60 * time.Second))
	ws.SetPongHandler(func(string) error {
		ws.SetReadDeadline(time.Now().Add(60 * time.Second))
		return nil
	})

	// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	for {
		var loc LocationUpdate
		err := ws.ReadJSON(&loc)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è WebSocket:", err)
			break
		}

		var location users.LiveLocation

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		result := config.DB.Where("user_id = ?", claims.UserID).First(&location)
		if result.RowsAffected == 0 {
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
			location = users.LiveLocation{
				UserID:    claims.UserID,
				Lat:       loc.Lat,
				Lng:       loc.Lng,
				UpdatedAt: time.Now(),
			}
			if err := config.DB.Create(&location).Error; err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", err)
				continue
			}
			log.Printf("‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID=%d, Lat=%.6f, Lng=%.6f\n", claims.UserID, loc.Lat, loc.Lng)
		} else {
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
			location.Lat = loc.Lat
			location.Lng = loc.Lng
			location.UpdatedAt = time.Now()

			if err := config.DB.Save(&location).Error; err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:", err)
				continue
			}
			log.Printf("‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ID=%d, Lat=%.6f, Lng=%.6f\n", claims.UserID, loc.Lat, loc.Lng)
		}

		// –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
		broadcastLocation(claims.UserID)
	}
}

// –†–∞—Å—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
func broadcastLocation(userID uint) {
	locationMu.Lock()
	defer locationMu.Unlock()

	var contacts []users.TrustedContact
	config.DB.Where("user_id = ?", userID).Find(&contacts)

	var location users.LiveLocation
	config.DB.Where("user_id = ?", userID).First(&location)

	locationJSON, _ := json.Marshal(location)
	log.Printf("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç %d –∫–ª–∏–µ–Ω—Ç–∞–º\n", len(clients))

	for client := range clients {
		err := client.WriteMessage(websocket.TextMessage, locationJSON)
		if err != nil {
			log.Println("‚ùå WebSocket –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
			client.Close()
			delete(clients, client)
		}
	}
}
